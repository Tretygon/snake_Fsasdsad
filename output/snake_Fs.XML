<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>snake_Fs</name></assembly>
<members>
<member name="T:SnakeGame.TurnResult">
<summary>
 data about what happened in a turn
</summary>
</member>
<member name="T:SnakeGame.Snake">
<summary>
 holds data about the snake
</summary>
</member>
<member name="T:SnakeGame.CellState">
<summary>
 indicates whether a cell is empty, fruit or snake 
</summary>
</member>
<member name="T:SnakeGame.Directions">
<summary>
 direcions to which the snake can move
</summary>
</member>
<member name="F:SnakeGame.GameManager.stateField">
<summary>
 holds &apos;what is where&apos; information 
</summary>
</member>
<member name="M:SnakeGame.GameManager.Restart">
<summary>
restarts the game so it can be reused instead of allocated anew
</summary>
</member>
<member name="M:SnakeGame.GameManager.MoveRel(SnakeGame.Directions)">
<summary>
 move relative to where the snake is facing 
 prefered by AI because it&apos;s easier to train (doesn&apos;t need to figure out which direction is which)
</summary>
</member>
<member name="M:SnakeGame.GameManager.MoveAbs(SnakeGame.Directions)">
<summary>
 move relative to the screen
 used for player as it is more natural to use
</summary>
</member>
<member name="M:SnakeGame.GameManager.LookAround">
<summary>
 provides the AI all the necessary information about its surroundings
</summary>
</member>
<member name="M:SnakeGame.GameManager.HardRestart">
<summary>
clear possible visual bugs and restart
</summary>
</member>
<member name="M:SnakeGame.AI.CrossOver(SnakeGame.AI,SnakeGame.AI)">
<summary>
 Randomly combines two specimen into a new one
</summary>
</member>
<member name="T:SnakeGame.AI">
<summary>
 the Neural network
</summary>
</member>
<member name="T:SnakeGame.NN_source">
<summary>
 where the neural network comes from
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.Unselect_cmd">
<summary>
 unselect previous generation 
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.Train_cmd">
<summary>
begins training of the population 
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.ToggleMusic_cmd">
<summary>
 toggle music on/off
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.SelectedGenChanged_cmd">
<summary>
 allows selecting the best AI from a previous generation
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.SavePopulation_cmd">
<summary>
save population to a directory
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.Pause_cmd">
<summary>
 pause/unpause the game
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.LoadPopulation_cmd">
<summary>
 loads a population from a directory
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.Initialize_cmd">
<summary>
 setup the UI
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.GetDg_cmd">
<summary>
get the training history datagrid
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.GeneratePopulation_cmd">
<summary>
 generates a new random population
</summary>
</member>
<member name="P:SnakeGame.GameViewModel.ChangePlayer_cmd">
<summary>
swaps between player and bot to play the game
</summary>
</member>
<member name="T:SnakeGame.MainWindow">
<summary>
Window defined in MainWindow.xaml
</summary>
</member>
<member name="M:SnakeGame.Misc.map2i``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])">
<summary>
 map indexed
</summary>
</member>
<member name="M:SnakeGame.Misc.mapInPlace_i``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])">
<summary>
 mapInPlace indexed
</summary>
</member>
<member name="M:SnakeGame.Misc.fold2Biased(System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}}},System.Double,System.Double[],System.Double[])">
<summary>
 like normal fold2 but afterwards it runs an extra folding iteration on bias
</summary>
</member>
<member name="P:SnakeGame.Settings.TurnsUntilStarvingToDeath">
<summary>
snake automatically dies after not eating for several turns to prevent running in circles indifinetely
</summary>
</member>
<member name="P:SnakeGame.Settings.NeuronLayerDim">
<summary>
 structure of the neural network
</summary>
</member>
<member name="P:SnakeGame.Settings.CrossChance">
<summary>
chance of crossover
</summary>
</member>
<member name="P:SnakeGame.Settings.WeightMutationChance">
<summary>
 how often are weigths mutated
</summary>
</member>
<member name="P:SnakeGame.Settings.MutationRate">
<summary>
 how much intensity mutation has
</summary>
</member>
<member name="P:SnakeGame.Settings.trainingGames">
<summary>
how long one learning cycle takes
</summary>
</member>
<member name="M:SnakeGame.PopulationModule.playUntilLose(SnakeGame.GameManager,SnakeGame.AI)">
<summary>
makes the AI play until it loses
</summary>
</member>
<member name="T:SnakeGame.PopulationModule">
<summary>
hieaieaiaieaiea
</summary>
</member>
<member name="T:App.App">
<summary>
Application defined in App.xaml
</summary>
</member>
</members>
</doc>
